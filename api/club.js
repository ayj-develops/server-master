/**
 * Date: June 22, 2022
 * Description:
 * Collection of API endopints that can query, update, write Club objects
 */

// Imports
const express = require('express'); // express server
const bodyParser = require('body-parser'); // better parse the request
const { default: mongoose } = require('mongoose'); // ORM for mongodb driver
const { default: slugify } = require('slugify'); // Slugify title
const Club = require('../models/club.model'); // Mongo Schema
const {
  BadRequest, Conflict, NotFound, GeneralError,
} = require('../middleware/error'); // Error types

/**
 * Define a router for this collection of api endpoints
 * @type {express.Router}
 */
const router = express.Router();
/**
 * Use json parsing middleware
 * @type {import('body-parser').json()}
 * */
const jsonParser = bodyParser.json();

/**
 * Creates a new club through the '/club/create' endpoint.
 * Errors thrown during creation will be passed to the
 * Error Handler middleware using @property {next}
 * @see handleErrors
 *
 *
 * @property {string} name                      -> Required field in request body,
 *                                                 denotes name of the club
 * @property {object} socialsObject             -> Assembled object from the instagram,
 *                                                 google_classroom_code and signup_link fields
 * @property {string} instagram                 -> instagram link of the club
 * @property {string} google_classroom_code     -> the club's google classroom code to join
 * @property {string} signup_link               -> the club's link to a google form or
 *                                                 somewhere for users to sign up
 * @property {string} description               -> The 'about me' section of the club
 * @property {string} clubfest_link             -> Link to the club's promotion video
 *
 * @returns {club} -> JSON representation of the created club object from mongodb
 */
router.post('/club/create', jsonParser, async (req, res, next) => {
  const newClubFields = {};
  const socialsObject = {};

  try {
    /*
     * Make sure these fields are only added to the newClubFields if they exist.
     * Otherwise they are left blank or they will not be
     */
    if (req.body.name) {
      newClubFields.name = req.body.name;
      const newSlug = slugify(req.body.name, { lower: true });
      newClubFields.slug = newSlug;
    } else throw new BadRequest('Missing required field: Name');
    if (req.body.instagram) socialsObject.instagram = req.body.instagram;
    if (req.body.google_classroom_code) {
      socialsObject.google_classroom_code = req.body.google_classroom_code;
    }
    if (req.body.signup_link) socialsObject.signup_link = req.body.signup_link;
    if (req.body.description) {
      if (req.body.description.length < 150) newClubFields.description = req.body.description;
      else throw new BadRequest('Character limit exceeded');
    } else throw new BadRequest('Missing required field: Description');
    if (req.body.clubfest_link) newClubFields.clubfest_link = req.body.clubfest_link;

    // If either of those social objects exist, then add the socialObject to newClubFields
    if (socialsObject.google_classroom_code
      || socialsObject.instagram || socialsObject.signup_link) {
      newClubFields.socials = socialsObject;
    }

    // events and posts fields that are auto updated each time a new post to the club is made
    newClubFields.events = 0;
    newClubFields.posts = 0;

    /**
     * Fetch whether the club exists or not using the slug
     *
     * @property {string} slug -> The autogenerated identification
     *                            that was created from the club name
     * @returns {Club || null}         -> The club object or null
     */
    const clubExists = await Club.exists({ slug: newClubFields.slug });

    /* Throw a Conflict error if the club exists */
    if (clubExists !== null) throw new Conflict('Resource Conflict: Name is taken already');
    else {
      /**
       * Using mongoose, create a new Club with the Club schema
       *
       * @see Club
       * @returns {Club} club -> the club object or an error
       */
      Club.create(newClubFields, (err, club) => {
        if (err) throw new GeneralError(`${err}`, `${err}`);
        else res.status(201).send(club);
      });
    }
  } catch (err) { // If any error was thrown pass it to the middleware
    next(err);
  }
});

/**
 * Delete a club by their slug
 *
 * @property {string} slug -> slug is the unique identifier from a club's name
 * @return {Club} club     -> the json representation of the just-deleted club
 */
router.delete('/club/slug/:slug/delete', jsonParser, async (req, res, next) => {
  const filterSlug = req.params.slug; // retrieve slug from the param
  try {
    /**
     * Query using mongodb's findOneAndDelete() to find the club object and delete it
     * @return {Club} club -> the json representation of the just-deleted club
     */
    Club.findOneAndDelete({ slug: filterSlug }, (err, club) => {
      if (err) { // If there's an error through a BadRequest 400 with the error
        throw new BadRequest('Bad Request', `${err}`);
      } else if (club === null) throw new NotFound(`Not found: ${filterSlug}`);
      else res.status(200).send(club);
    });
  } catch (err) { // If any error was thrown pass it to the middleware
    next(err);
  }
});

/**
 * Filter clubs through the Club object id
 *
 * @property {string} id -> id is the unique identifier autogenerated by mongodb
 * @return {Club} club   -> the club that contains this id
 */
router.get('/club/id/:id', jsonParser, async (req, res, next) => {
  const filterId = req.params.id; // retrieve id from the param
  try {
    /**
     * Query using mongodb's find to find the club object
     * @return {Club} club -> the json representation of the club
     */
    Club.find({ _id: mongoose.mongo.ObjectId(filterId) }, (err, club) => {
      if (!err) { // If there's an error through a BadRequest 400 with the error
        res.status(200).send(club);
      } else {
        throw new BadRequest('Bad Request', `${err}`);
      }
    });
  } catch (err) { // If any error was thrown pass it to the middleware
    next(err);
  }
});

/**
 * Filter clubs through their slug
 */
router.get('/club/slug/:slug', jsonParser, async (req, res, next) => {
  const filterSlug = req.params.slug;
  try {
    Club.find({ slug: filterSlug }, (err, club) => {
      if (err) throw new BadRequest('Bad Request', `${err}`);
      else if (club.length === 0) {
        throw new NotFound(`Not found: ${filterSlug}`);
      } else res.status(200).send(club);
    });
  } catch (err) {
    next(err);
  }
});

/**
 * Retrieve all clubs
 */
router.get('/all', jsonParser, async (req, res, next) => {
  try {
    Club.find({}, (err, clubs) => {
      if (!err) {
        res.status(200).send(clubs);
      } else {
        throw new BadRequest('Bad Request', `${err}`);
      }
    });
  } catch (err) {
    next(err);
  }
});

/**
 * Updates a club object
 *
 *
 * Does NOT update teacher or execs. Those go through a separate endpoint
 */
router.put('/club/slug/:slug/update', jsonParser, async (req, res, next) => {
  const filterSlug = req.params.slug;
  const updateFields = {};
  const socialsObject = {};
  try {
    if (req.body.name) {
      updateFields.name = req.body.name;
      const newSlug = slugify(req.body.name, { lower: true });
      updateFields.slug = newSlug;
    }
    if (req.body.instagram) socialsObject.instagram = req.body.instagram;
    if (req.body.google_classroom_code) {
      socialsObject.google_classroom_code = req.body.google_classroom_code;
    }
    if (req.body.signup_link) socialsObject.signup_link = req.body.signup_link;
    if (req.body.description) updateFields.description = req.body.description;
    if (req.body.clubfest_link) updateFields.clubfest_link = req.body.clubfest_link;

    if (socialsObject.google_classroom_code
      || socialsObject.instagram || socialsObject.signup_link) {
      updateFields.socials = socialsObject;
    }

    Club.findOneAndUpdate({ slug: filterSlug }, updateFields, { new: true }, (err, club) => {
      if (err) throw new GeneralError(`${err}`, `${err}`);
      else if (club === null) throw new NotFound(`Not found: ${filterSlug}`);
      else {
        res.status(200).send(club);
      }
    });
  } catch (err) {
    next(err);
  }
});

/**
 * endpoint to update club execs
 *
 * adds club execs
 */
router.put('/club/slug/:slug/executives/add', jsonParser, async (req, res, next) => {
  const filterSlug = req.params.slug;
  let updateFieldExecutive;
  try {
    if (req.body.executive) updateFieldExecutive = req.body.executive;
    Club.findOneAndUpdate(
      { slug: filterSlug },
      { $addToSet: { execs: updateFieldExecutive } },
      { new: true },
      (err, club) => {
        if (err) {
          throw new BadRequest('Bad Request', `${err}`);
        } else if (club === null) throw new NotFound(`Not found: ${filterSlug}`);
        else res.status(200).send(club);
      },
    );
  } catch (err) {
    next(err);
  }
});

/**
 * endpoint to update club teacher
 *
 * adds club teachers
 */
router.put('/club/slug/:slug/teacher/add', jsonParser, async (req, res, next) => {
  const filterSlug = req.params.slug;
  let updateFieldTeacher;
  if (req.body.teacher) updateFieldTeacher = req.body.teacher;
  try {
    Club.findOneAndUpdate(
      { slug: filterSlug },
      { $addToSet: { teachers: updateFieldTeacher } },
      { new: true },
      (err, club) => {
        if (err) {
          throw new BadRequest('Bad Request', `${err}`);
        } else if (club === null) throw new NotFound(`Not found: ${filterSlug}`);
        else res.status(200).send(club);
      },
    );
  } catch (err) {
    next(err);
  }
});

/**
 * delete club execs
 */
router.delete('/club/slug/:slug/executives/delete', jsonParser, async (req, res, next) => {
  const filterSlug = req.params.slug;
  let updateFieldExecutive;
  if (req.body.executive) updateFieldExecutive = req.body.executive;
  try {
    Club.findOneAndUpdate(
      { slug: filterSlug },
      { $pull: { execs: updateFieldExecutive } },
      { new: true },
      (err, club) => {
        if (err) {
          throw new BadRequest('Bad Request', `${err}`);
        } else if (club === null) throw new NotFound(`Not found: ${filterSlug}`);
        else res.status(200).send(club);
      },
    );
  } catch (err) {
    next(err);
  }
});

/**
 * delete club teachers
 */
router.delete('/club/slug/:slug/teachers/delete', jsonParser, async (req, res, next) => {
  const filterSlug = req.params.slug;
  let updateFieldTeacher;
  if (req.body.teacher) updateFieldTeacher = req.body.teacher;
  try {
    Club.findOneAndUpdate(
      { slug: filterSlug },
      { $pull: { teachers: updateFieldTeacher } },
      { new: true },
      (err, club) => {
        if (err) {
          throw new BadRequest('Bad Request', `${err}`);
        } else if (club === null) throw new NotFound(`Not found: ${filterSlug}`);
        else res.status(200).send(club);
      },
    );
  } catch (err) {
    next(err);
  }
});

module.exports = router;
